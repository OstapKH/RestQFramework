- name: Initialize grid 5000
  hosts: grid5000
  remote_user: oskilbaso
  vars:
    OS_image: ubuntu2204-x64-min
    grid_time: "5:00:00"
  tasks:
    - name: Go to the frontend of {{ grid_site }} then create a job
      command: "oarsub -l host=2,walltime={{ grid_time }} -r 'now' -t deploy -p 'host like chifflot-%'"
      register: job_output

    - name: Extract job ID for chifflot nodes
      set_fact:
        chifflot_job_id: "{{ job_output.stdout | regex_search('OAR_JOB_ID=(\\d+)', '\\1') | first }}"

    - name: Log chifflot job ID
      debug:
        msg: "Chifflot Job ID: {{ chifflot_job_id }}"

    - name: Wait for chifflot reservation validation
      pause:
        minutes: 10

    - name: Get chifflot job details
      command: "oarstat -f -j {{ chifflot_job_id }}"
      register: chifflot_job_details

    - name: Extract assigned chifflot hostnames
      set_fact:
        chifflot_nodes: "{{ (chifflot_job_details.stdout | regex_search('assigned_hostnames = (.+)', '\\1')) | first | split('+') }}"

    - name: Log chifflot nodes
      debug:
        msg: "Chifflot nodes: {{ chifflot_nodes }}"

    - name: Reserve one additional node
      command: "oarsub -l host=1,walltime={{ grid_time }} -r 'now' -t deploy"
      register: other_job_output

    - name: Extract job ID for other node
      set_fact:
        other_job_id: "{{ other_job_output.stdout | regex_search('OAR_JOB_ID=(\\d+)', '\\1') | first }}"

    - name: Log other job ID
      debug:
        msg: "Other Job ID: {{ other_job_id }}"

    - name: Wait for other reservation validation
      pause:
        minutes: 10

    - name: Get other job details
      command: "oarstat -f -j {{ other_job_id }}"
      register: other_job_details

    - name: Extract assigned other hostname
      set_fact:
        other_node: "{{ (other_job_details.stdout | regex_search('assigned_hostnames = (.+)', '\\1')) | first }}"

    - name: Log other node
      debug:
        msg: "Other node: {{ other_node }}"

    - name: Assign node names to variables
      set_fact:
        node1: "{{ chifflot_nodes[0] }}"
        node2: "{{ chifflot_nodes[1] }}"
        node3: "{{ other_node }}"
        cacheable: true

    - name: Log node assignments
      debug:
        msg: "Node1 (chifflot): {{ node1 }}, Node2 (chifflot): {{ node2 }}, Node3: {{ node3 }}"

    - name: Add nodes to in-memory inventory
      add_host:
        name: "{{ item }}"
        ansible_host: "{{ lookup('vars', item) }}"
        groups: reserved_nodes
        node1: "{{ node1 }}"
        node2: "{{ node2 }}"
        node3: "{{ node3 }}"
      loop:
        - node1
        - node2
        - node3

    - name: Deploy systems on all nodes in parallel
      command: "kadeploy3 -m {{ item }} -e {{ OS_image }}"
      loop:
        - "{{ node1 }}"
        - "{{ node2 }}"
        - "{{ node3 }}"
      async: 1800  # 30 minutes timeout
      poll: 0
      register: deploy_async_results

    - name: Wait for parallel deployments to finish
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: deploy_async_poll_results
      until: deploy_async_poll_results.finished
      retries: 300  # Retry for up to 300 * 10 seconds = 50 minutes
      delay: 10  # Check every 10 seconds
      loop: "{{ deploy_async_results.results }}"

# - name: Deploy system on nodes
#   hosts: grid5000
#   remote_user: oskilbaso
#   vars:
#     OS_image: ubuntu2204-x64-min
#   tasks:
#     - name: Deploy system on Node1
#       command: "kadeploy3 -m chifflot-1.{{ grid_site }}.grid5000.fr -e {{ OS_image }}"

#     - name: Deploy system on Node2
#       command: "kadeploy3 -m chifflot-2.{{ grid_site }}.grid5000.fr -e {{ OS_image }}"

#     - name: Deploy system on Node3
#       command: "kadeploy3 -m chifflot-7.{{ grid_site }}.grid5000.fr -e {{ OS_image }}"

- name: Setup Node 1
  hosts: node1
  remote_user: root
  vars:
    postgres_container_name: db-docker-container
    postgres_image: postgres:14
    postgres_password: password
    tpch_db: tpchdb
    postgres_port: 5432

  tasks:
    - name: Download Java 21
      get_url:
        url: https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
        dest: /root/jdk-21_linux-x64_bin.deb
      register: java_download

    - name: Log Java download
      debug:
        msg: "Java downloaded: {{ java_download.dest }}"

    - name: Install Java 21
      apt:
        deb: /root/jdk-21_linux-x64_bin.deb
      register: java_install

    - name: Log Java installation
      debug:
        msg: "Java installation completed with status: {{ java_install.changed }}"

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Run apt-get update
      command: apt-get update
      changed_when: false

    - name: Install wget, ca-certificates, and Docker dependencies
      apt:
        name:
          - wget
          - ca-certificates
          - apt-transport-https
          - gnupg-agent
          - software-properties-common
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker.io
          - docker-compose
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true
    
    - name: Clone RestQFramework repository
      git:
        repo: https://github.com/OstapKH/RestQFramework.git
        dest: /root/RestQFramework
        recursive: yes
      register: git_clone

    - name: Log repository clone
      debug:
        msg: "Repository cloned"

    - name: Start PostgreSQL with docker-compose
      shell: |
        cd /root/RestQFramework/ansible-benchmark/docker-db
        docker-compose up -d
      register: docker_compose_result
      retries: 3
      delay: 10
      until: docker_compose_result is success
      ignore_errors: true

    - name: Wait for PostgreSQL to be ready
      wait_for:
        host: 127.0.0.1
        port: "{{ postgres_port }}"
        delay: 5
        timeout: 60
        state: started

    - name: Log database setup
      debug:
        msg: "PostgreSQL container is running with DB 'tpchdb' and user 'admin'"

    - name: Set installation directory for libraries
      set_fact:
        library_install_dir: "/root/public"

    - name: Install Cargo and other dependencies
      apt:
        name:
          - cargo
          - pkg-config
          - libssl-dev
        state: present
        install_recommends: no

    - name: Log installation of Cargo and dependencies
      debug:
        msg: "Cargo and other dependencies installed"

    - name: Clone Scaphandre repo
      git:
        repo: https://github.com/hubblo-org/scaphandre.git
        dest: "{{ library_install_dir }}/scaphandre"
        update: no

    - name: Log Scaphandre repo clone
      debug:
        msg: "Scaphandre repo cloned to {{ library_install_dir }}/scaphandre."

    - name: Build Scaphandre
      shell: |
        cd {{ library_install_dir }}/scaphandre
        cargo build --release

    - name: Log Scaphandre build completion
      debug:
        msg: "Scaphandre built successfully."

    - name: Move Scaphandre binary to /usr/local/bin
      command: sudo mv {{ library_install_dir }}/scaphandre/target/release/scaphandre /usr/local/bin/

    - name: Log Scaphandre binary move
      debug:
        msg: "Scaphandre binary moved to /usr/local/bin."

    - name: Install Maven
      apt:
        name: maven
        state: present
      register: maven_install

    - name: Initialize Maven wrapper
      shell: mvn -N io.takari:maven:wrapper

    - name: Build benchbase
      shell: |
        cd /root/RestQFramework/benchbase/
        ./mvnw clean install -P postgres -DskipTests
      register: benchbase_build

    - name: Log benchbase build
      debug:
        msg: "Benchbase build completed with status: {{ benchbase_build.rc }}"

    - name: Build core
      shell: |
        cd /root/RestQFramework/core
        mvn clean install -P executable-jar
      register: core_build

    - name: Log core build
      debug:
        msg: "Core build completed with status: {{ core_build.rc }}"

    - name: Configure database connection properties
      lineinfile:
        path: /root/RestQFramework/core/src/main/resources/application.properties
        regexp: '^spring.datasource.url=.*'
        line: "spring.datasource.url=jdbc:postgresql://localhost:{{ postgres_port }}/{{ tpch_db }}"
        create: yes

    - name: Configure database username
      lineinfile:
        path: /root/RestQFramework/core/src/main/resources/application.properties
        regexp: '^spring.datasource.username=.*'
        line: "spring.datasource.username=admin"
        create: yes

    - name: Configure database password
      lineinfile:
        path: /root/RestQFramework/core/src/main/resources/application.properties
        regexp: '^spring.datasource.password=.*'
        line: "spring.datasource.password={{ postgres_password }}"
        create: yes

    - name: Rebuild core with updated configuration
      shell: |
        cd /root/RestQFramework/core
        mvn clean install -P executable-jar
      register: core_rebuild

    - name: Log core rebuild
      debug:
        msg: "Core rebuild completed with status: {{ core_rebuild.rc }}"

    - name: Run setup-formula-config and start docker compose for DB server
      shell: |
        cd /root/RestQFramework/ansible-benchmark/INTEL
        chmod +x setup-formula-config.sh
        ./setup-formula-config.sh
      become: yes
      register: docker_compose_db

    - name: Run Java application
      shell: |
        cd /root/RestQFramework/core
        java -jar target/core-1.0-SNAPSHOT.jar > /root/core_server.log 2>&1 &
      register: java_app_start

    - name: Log Java application start
      debug:
        msg: "Java application exectuted (DB server)"

    - name: Start Scaphandre measurement on DB server
      shell: |
        nohup scaphandre json -t 3600 -s {{ scaphandre_timestep_s }} --step-nano {{ scaphandre_timestep_nanoseconds }} --process-regex ".*postgres.*" -f /root/experiments_summary_dbserver.json &
      async: 3600
      poll: 0
      register: scaphandre_task

- name: Setup Node 2
  hosts: node2
  remote_user: root
  vars:
    api_container_name: spring-api
    api_port: 8086
    db_host: "{{ node1 }}"
    db_port: 5432
    db_name: tpchdb
    db_user: admin
    db_password: password
  tasks:
    - name: Download Java 21
      get_url:
        url: https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
        dest: /root/jdk-21_linux-x64_bin.deb
      register: java_download

    - name: Install Java 21
      apt:
        deb: /root/jdk-21_linux-x64_bin.deb
      register: java_install

    - name: Install wget and ca-certificates
      apt:
        name: 
          - wget
          - ca-certificates
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Run apt-get update
      command: apt-get update
      changed_when: false

    - name: Set installation directory for libraries
      set_fact:
        library_install_dir: /root/public

    - name: Install podman-docker to {{ library_install_dir }}
      apt:
        name:
          - podman-docker
        state: present
        install_recommends: no
      environment:
        DESTDIR: "{{ library_install_dir }}"

    - name: Log installation of podman-docker
      debug:
        msg: "Podman-docker installed in {{ library_install_dir }}."

    - name: Install docker.io to {{ library_install_dir }}
      apt:
        name:
          - docker.io
        state: present
        install_recommends: no
      environment:
        DESTDIR: "{{ library_install_dir }}"

    - name: Log installation of docker.io
      debug:
        msg: "Docker.io installed in {{ library_install_dir }}."

    - name: Install docker-compose to {{ library_install_dir }}
      apt:
        name:
          - docker-compose
        state: present
        install_recommends: no
      environment:
          DESTDIR: "{{ library_install_dir }}"

    - name: Log installation of docker-compose
      debug:
        msg: "Docker-compose installed in {{ library_install_dir }}."

    - name: Install Cargo and other dependencies to {{ library_install_dir }}
      apt:
        name:
          - cargo
          - pkg-config
          - libssl-dev
        state: present
        install_recommends: no
      environment:
        DESTDIR: "{{ library_install_dir }}"

    - name: Log installation of Cargo and dependencies
      debug:
        msg: "Cargo and other dependencies installed in {{ library_install_dir }}."

    - name: Clone Scaphandre repo
      git:
        repo: https://github.com/hubblo-org/scaphandre.git
        dest: "{{ library_install_dir }}/scaphandre"
        update: no

    - name: Log Scaphandre repo clone
      debug:
        msg: "Scaphandre repo cloned to {{ library_install_dir }}/scaphandre."

    - name: Build Scaphandre
      shell: |
        cd {{ library_install_dir }}/scaphandre
        cargo build --release

    - name: Log Scaphandre build completion
      debug:
        msg: "Scaphandre built successfully."

    - name: Move Scaphandre binary to /usr/local/bin
      command: sudo mv {{ library_install_dir }}/scaphandre/target/release/scaphandre /usr/local/bin/

    - name: Log Scaphandre binary move
      debug:
        msg: "Scaphandre binary moved to /usr/local/bin."

    - name: Install Maven
      apt:
        name: maven
        state: present

    - name: Initialize Maven wrapper
      shell: mvn -N io.takari:maven:wrapper

    - name: Clone RestQFramework repository
      git:
        repo: https://github.com/OstapKH/RestQFramework.git
        dest: /root/RestQFramework
        recursive: yes

    - name: Run setup-formula-config and start docker compose for power monitoring
      shell: |
        cd /root/RestQFramework/ansible-benchmark/INTEL
        chmod +x setup-formula-config.sh
        ./setup-formula-config.sh
      become: yes
      register: docker_compose_power

    - name: Build benchbase
      shell: |
        cd /root/RestQFramework/benchbase/
        ./mvnw clean install -P postgres -DskipTests

    - name: Build core
      shell: |
        cd /root/RestQFramework/core
        mvn clean install -P simple-jar

    - name: Modify application properties
      lineinfile:
        path: /root/RestQFramework/api-http/src/main/resources/application.properties
        regexp: '^spring.datasource.url=.*'
        line: "spring.datasource.url=jdbc:postgresql://{{ db_host }}:{{ db_port }}/{{ db_name }}"

    - name: Modify Jakarta persistence URL
      lineinfile:
        path: /root/RestQFramework/api-http/src/main/resources/application.properties
        regexp: '^jakarta.persistence.jdbc.url=.*'
        line: "jakarta.persistence.jdbc.url=jdbc:postgresql://{{ db_host }}:{{ db_port }}/{{ db_name }}"

    - name: Build API HTTP module
      shell: |
        cd /root/RestQFramework/api-http
        mvn clean install -P springboot-app

    - name: Start Scaphandre measurement on API server
      shell: |
        nohup scaphandre json -t 3600 -s {{ scaphandre_timestep_s }} --step-nano {{ scaphandre_timestep_nanoseconds }} -f /root/experiments_summary_apiserver.json &
      async: 3600
      poll: 0
      register: scaphandre_task

    - name: Copy built JAR file to docker-api directory
      copy:
        src: /root/RestQFramework/api-http/target/api-http-1.0-SNAPSHOT.jar
        dest: /root/RestQFramework/ansible-benchmark/docker-api/target/api-http-1.0-SNAPSHOT.jar
        mode: '0644'
        remote_src: yes

    - name: Update docker-compose.yml with correct environment variables
      lineinfile:
        path: /root/RestQFramework/ansible-benchmark/docker-api/docker-compose.yml
        regexp: '^      SPRING_DATASOURCE_URL:.*'
        line: "      SPRING_DATASOURCE_URL: jdbc:postgresql://{{ db_host }}:{{ db_port }}/{{ db_name }}"
      register: update_db_url

    - name: Update docker-compose.yml with database username
      lineinfile:
        path: /root/RestQFramework/ansible-benchmark/docker-api/docker-compose.yml
        regexp: '^      SPRING_DATASOURCE_USERNAME:.*'
        line: "      SPRING_DATASOURCE_USERNAME: {{ db_user }}"
      register: update_db_user

    - name: Update docker-compose.yml with database password
      lineinfile:
        path: /root/RestQFramework/ansible-benchmark/docker-api/docker-compose.yml
        regexp: '^      SPRING_DATASOURCE_PASSWORD:.*'
        line: "      SPRING_DATASOURCE_PASSWORD: {{ db_password }}"
      register: update_db_password

    - name: Start API server container
      shell: |
        cd /root/RestQFramework/ansible-benchmark/docker-api
        docker-compose up -d
      register: docker_compose_result
      retries: 3
      delay: 10
      until: docker_compose_result is success
      ignore_errors: true

    - name: Wait for API server to be ready
      wait_for:
        host: 127.0.0.1
        port: "{{ api_port }}"
        delay: 5
        timeout: 60
        state: started

    - name: Log API server container start
      debug:
        msg: "API server container is running on port {{ api_port }}"

- name: Setup Node 3
  hosts: node3
  remote_user: root
  tasks:
    - name: Download Java 21
      get_url:
        url: https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb
        dest: /root/jdk-21_linux-x64_bin.deb
      register: java_download

    - name: Install Java 21
      apt:
        deb: /root/jdk-21_linux-x64_bin.deb
      register: java_install

    - name: Install wget and ca-certificates
      apt:
        name: 
          - wget
          - ca-certificates
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Maven
      apt:
        name: maven
        state: present

    - name: Initialize Maven wrapper
      shell: mvn -N io.takari:maven:wrapper

    - name: Clone RestQFramework repository
      git:
        repo: https://github.com/OstapKH/RestQFramework.git
        dest: /root/RestQFramework
        recursive: yes

    - name: Build benchbase
      shell: |
        cd /root/RestQFramework/benchbase/
        ./mvnw clean install -P postgres -DskipTests

    - name: Build core
      shell: |
        cd /root/RestQFramework/core
        mvn clean install -P simple-jar

    - name: Copy benchmark-config.xml to server
      copy:
        src: ./benchmark-config.xml
        dest: /root/RestQFramework/api-http/src/main/resources/benchmark-config.xml
        mode: 0644
      register: config_copy

    - name: Log configuration file copy
      debug:
        msg: "Benchmark configuration file copied to server"

    - name: Modify API port URL in ApiBenchmark.java
      lineinfile:
        path: /root/RestQFramework/api-http/src/main/java/com/restq/api_http/Benchmark/ApiBenchmark.java 
        regexp: '^    private static final String BASE_URL =.*'
        line: "    private static final String BASE_URL = \"http://{{ node2 }}:8086/api/reports\";"

    - name: Build Benchmark module
      shell: |
        cd /root/RestQFramework/api-http
        mvn clean install -P benchmark-app

    - name: Run benchmark
      shell: |
        cd /root/RestQFramework/api-http
        java -jar target/api-http-1.0-SNAPSHOT-jar-with-dependencies.jar > /root/benchmark_client.log 2>&1
          
- name: Stopping Scaphandre measurement on Node 1
  hosts: node1
  remote_user: root
  tasks:
    - name: Stop Scaphandre measurement on Node 1
      shell: |
        pkill -f "scaphandre json -t 3600 -s {{ scaphandre_timestep_s }} --step-nano {{ scaphandre_timestep_nanoseconds }}"
      ignore_errors: true

    - name: Log Scaphandre stop on Node 1
      debug:
        msg: "Scaphandre measurement stopped on DB server."

- name: Stopping Scaphandre measurement on Node 2
  hosts: node2
  remote_user: root
  tasks:
    - name: Stop Scaphandre measurement on Node 2
      shell: |
        pkill -f "scaphandre json -t 3600 -s {{ scaphandre_timestep_s }} --step-nano {{ scaphandre_timestep_nanoseconds }}"
      ignore_errors: true

    - name: Log Scaphandre stop on Node 2
      debug:
        msg: "Scaphandre measurement stopped on API server."

- name: Fetch results from Node 1
  hosts: node1
  remote_user: root
  tasks:
    - name: Fetch results to controller
      fetch:
        src: /root/experiments_summary_dbserver.json
        dest: /tmp/experiments_summary_dbserver.json
        flat: yes

- name: Copy results to Node 3 from Node 1
  hosts: node3
  remote_user: root
  tasks:
    - name: Create directory for fixed JSON files
      file:
        path: /root/fixed_json_files
        state: directory
        mode: '0755'
        
    - name: Copy results from controller to Node 3
      copy:
        src: /tmp/experiments_summary_dbserver.json
        dest: /root/fixed_json_files/experiments_summary_dbserver.json

- name: Fetch results from Node 2
  hosts: node2
  remote_user: root
  tasks:
    - name: Fetch results to controller
      fetch:
        src: /root/experiments_summary_apiserver.json
        dest: /tmp/experiments_summary_apiserver.json
        flat: yes

- name: Copy results to Node 3 from Node 2
  hosts: node3
  remote_user: root
  tasks:
    - name: Create directory for fixed JSON files
      file:
        path: /root/fixed_json_files
        state: directory
        mode: '0755'
        
    - name: Copy results from controller to Node 3
      copy:
        src: /tmp/experiments_summary_apiserver.json
        dest: /root/fixed_json_files/experiments_summary_apiserver.json
        
    - name: Find benchmark results files
      find:
        paths: /root/RestQFramework/api-http
        patterns: "benchmark_results_*.json"
        recurse: yes
      register: benchmark_files
      
    - name: Copy benchmark results to fixed json directory
      copy:
        src: "{{ item.path }}"
        dest: /root/fixed_json_files/
        remote_src: yes
      with_items: "{{ benchmark_files.files }}"
        
    - name: Create timestamp variable
      set_fact:
        timestamp: "{{ ansible_date_time.iso8601 }}"
        
    - name: Build and run JSON combiner
      shell: |
        cd /root/RestQFramework/api-http
        javac -cp /root/RestQFramework/api-http/target/api-http-1.0-SNAPSHOT-jar-with-dependencies.jar src/main/java/com/restq/utils/JsonCombiner.java
        java -cp /root/RestQFramework/api-http/target/api-http-1.0-SNAPSHOT-jar-with-dependencies.jar:src/main/java com.restq.utils.JsonCombiner /root/fixed_json_files /root/combined_results_{{ timestamp }}.json
      register: combiner_output
      
    - name: Log combiner output
      debug:
        msg: "{{ combiner_output.stdout_lines }}"
        
    - name: Fetch combined results file
      fetch:
        src: /root/combined_results_{{ timestamp }}.json
        dest: ~/Desktop/Results_rest_q_xml_benchmarks/combined_results_{{ timestamp }}.json
        flat: yes
        
    - name: Log results download
      debug:
        msg: "Combined benchmark results downloaded to your local machine at ~/Desktop/Results_rest_q_xml_benchmarks/combined_results_{{ timestamp }}.json"

# - name: Fetch log files from Node 2 (API server)
#   hosts: node2
#   remote_user: root
#   tasks:
    # - name: Fetch API server logs
    #   fetch:
    #     src: /root/api_server.log
    #     dest: ~/Desktop/Results_rest_q_xml_benchmarks/api_server_{{ ansible_date_time.iso8601 }}.log
    #     flat: yes
    #         
    # - name: Log API server log download
    #   debug:
    #     msg: "API server logs downloaded to your local machine at ~/Desktop/Results_rest_q_xml_benchmarks/api_server_{{ ansible_date_time.iso8601 }}.log"
        
    # - name: Fetch system logs
    #   fetch:
    #     src: /var/log/syslog
    #     dest: ~/Desktop/Results_rest_q_xml_benchmarks/node2_syslog_{{ ansible_date_time.iso8601 }}.log
    #     flat: yes
    #   ignore_errors: true
      
# - name: Add nodes to inventory
#   hosts: localhost
#   gather_facts: false
#   tasks:
#     - name: Add nodes to inventory
#       add_host:
#         name: "node1"
#         ansible_host: "chifflot-3.lille.grid5000.fr"
#         groups: reserved_nodes
#       register: node1_add

#     - name: Add nodes to inventory
#       add_host:
#         name: "node2"
#         ansible_host: "chifflot-5.lille.grid5000.fr"
#         groups: reserved_nodes
#       register: node2_add

#     - name: Add nodes to inventory
#       add_host:
#         name: "node3"
#         ansible_host: "chifflot-7.lille.grid5000.fr"
#         groups: reserved_nodes
#       register: node3_add

- name: Install MongoDB tools on Node1
  hosts: node1
  remote_user: root
  tasks:
    - name: Import MongoDB public key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-6.0.asc
        state: present

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse"
        state: present
        filename: mongodb-org-6.0

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install MongoDB tools
      apt:
        name: mongodb-database-tools
        state: present

- name: Install MongoDB tools on Node2
  hosts: node2
  remote_user: root
  tasks:
    - name: Import MongoDB public key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-6.0.asc
        state: present

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse"
        state: present
        filename: mongodb-org-6.0

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install MongoDB tools
      apt:
        name: mongodb-database-tools
        state: present

- name: Dump MongoDB db_power on DB server (Node1) and fetch dump
  hosts: node1
  remote_user: root
  tasks:
    - name: Dump MongoDB db_power on DB server
      shell: docker exec mongodb mongoexport --db db_power --collection power_reports --out /root/mongodump-DB-server.json --jsonArray
      register: mongodump_db
    
    - name: Download JSON file from docker container to node 
      shell: docker cp mongodb:/root/mongodump-DB-server.json /root/mongodump-DB-server.json

    - name: Fetch MongoDB dump from DB server to controller
      fetch:
        src: /root/mongodump-DB-server.json
        dest: ~/Desktop/Results_rest_q_xml_benchmarks/mongodump-DB-server.json
        flat: yes

    - name: Log DB server dump download
      debug:
        msg: "MongoDB dump from DB server downloaded to ~/Desktop/Results_rest_q_xml_benchmarks/mongodump-DB-server.json"

- name: Dump MongoDB db_power on API server (Node2) and fetch dump
  hosts: node2
  remote_user: root
  tasks:
    - name: Dump MongoDB db_power on API server
      shell: docker exec mongodb mongoexport --db db_power --collection power_reports --out /root/mongodump-API-server.json --jsonArray
      register: mongodump_api

    - name: Download JSON file from docker container to node 
      shell: docker cp mongodb:/root/mongodump-API-server.json /root/mongodump-API-server.json

    - name: Fetch MongoDB dump from API server to controller
      fetch:
        src: /root/mongodump-API-server.json
        dest: ~/Desktop/Results_rest_q_xml_benchmarks/mongodump-API-server.json
        flat: yes

    - name: Log API server dump download
      debug:
        msg: "MongoDB dump from API server downloaded to ~/Desktop/Results_rest_q_xml_benchmarks/mongodump-API-server.json"


# - name: Fetch log files from Node 2 (API server)
#   hosts: node2
#   remote_user: root
#   tasks:
#     - name: Fetch system logs
#       fetch:
#         src: /var/log/syslog
#         dest: ~/Desktop/Results_rest_q_xml_benchmarks/node2_syslog_{{ ansible_date_time.iso8601 }}.log
#         flat: yes
#       ignore_errors: true

- name: Fetch log files from Node 3 (Benchmark client)
  hosts: node3
  remote_user: root
  tasks:
    - name: Fetch benchmark client logs
      fetch:
        src: /root/benchmark_client.log
        dest: ~/Desktop/Results_rest_q_xml_benchmarks/benchmark_client_{{ ansible_date_time.iso8601 }}.log
        flat: yes

    - name: Log benchmark client log download
      debug:
        msg: "Benchmark client logs downloaded to your local machine at ~/Desktop/Results_rest_q_xml_benchmarks/benchmark_client_{{ ansible_date_time.iso8601 }}.log"
    
    - name: Fetch system logs
      fetch:
        src: /var/log/syslog
        dest: ~/Desktop/Results_rest_q_xml_benchmarks/node3_syslog_{{ ansible_date_time.iso8601 }}.log
        flat: yes
      ignore_errors: true
